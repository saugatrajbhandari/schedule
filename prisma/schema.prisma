// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  events       Event[] // Assuming one-to-many relationship with Event model
  bookings     Booking[] // Assuming one-to-many relationship with Booking model
  clerkUserId  String        @unique
  email        String        @unique
  username     String        @unique
  name         String
  imageUrl     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Availability Availability?

  @@map("users") // Maps the model to the 'users' table in the database
}

model Event {
  id          String    @id @default(uuid())
  title       String
  description String? // Optional field
  duration    Int
  userId      String
  isPrivate   Boolean
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bookings    Booking[] // Assuming one-to-many relationship with Booking model

  user User @relation(fields: [userId], references: [id])

  @@map("events") // Maps the model to the 'events' table
}

model Booking {
  id             String   @id @default(uuid())
  eventId        String
  userId         String
  name           String
  email          String
  additionalInfo String? // Optional field
  startTime      DateTime
  endTime        DateTime
  meetLink       String
  googleEventId  String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id])

  @@map("bookings") // Maps the model to the 'bookings' table
}

model Availability {
  id        String             @id @default(uuid())
  userId    String             @unique
  days      DaysAvailability[]
  timeGap   Int
  created   DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model DaysAvailability {
  id             String   @id @default(uuid())
  availabilityId String   @unique
  day            Day
  startTime      DateTime
  endTime        DateTime

  availability Availability @relation(fields: [availabilityId], references: [id], onDelete: Cascade)
}

enum Day {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}
